{"version":3,"sources":["actions/types.js","reducers/index.js","reducers/simpleAuthButton.js","components/TestList.js","actions/index.js","App.js","serviceWorker.js","index.js","Root.js"],"names":["CHANGE_AUTH","combineReducers","auth","state","arguments","length","undefined","action","type","payload","TestList","react_default","a","createElement","Component","changeAuth","isLoggedIn","App","_this","this","props","react_router_dom","className","to","onClick","react_router","path","exact","component","renderHeader","connect","actions","Boolean","window","location","hostname","match","ReactDOM","render","_ref","children","_ref$initialState","initialState","store","createStore","reducers","applyMiddleware","reduxPromise","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAAaA,EAAc,cCGZC,cAAgB,CAE7BC,KCHa,WAAiC,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAARG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOC,MACX,KAAKR,EACD,OAAOO,EAAOE,QAClB,QACI,OAAON,8CCQJO,mLAXP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,mCANGC,aCAhB,SAASC,EAAWC,GACvB,MAAO,CACHR,KAAMR,EACNS,QAASO,OCCXC,yLACa,IAAAC,EAAAC,KACX,OAAIA,KAAKC,MAAMlB,KAEPS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,UAAU,WAAWC,GAAG,SAA9B,SACJZ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQS,UAAU,WAAWE,QAAS,kBAAMN,EAAKE,MAAML,YAAW,KAAlE,cAERJ,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAK,QAAQC,OAAK,EAACC,UAAWlB,KAKzCC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQS,UAAU,UAAUE,QAAS,kBAAMN,EAAKE,MAAML,YAAW,KAAjE,8CAMhB,OAAQJ,EAAAC,EAAAC,cAAA,WAAMM,KAAKU,eAAX,YArBEf,aA6BHgB,kBAJf,SAAyB3B,GACrB,MAAO,CAAED,KAAMC,EAAMD,OAGe6B,EAAzBD,CAAkCb,GCvB7Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACL3B,EAAAC,EAAAC,cCLW,SAAA0B,GAAmC,IAAhCC,EAAgCD,EAAhCC,SAAgCC,EAAAF,EAAtBG,oBAAsB,IAAAD,EAAT,GAASA,EACxCE,EAAQC,YACVC,EACAH,EACAI,YAAgBC,MAEpB,OACIpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUL,MAAOA,GACZH,IDHT,KACI7B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAK,IAAIE,UAAWX,MAGjCgC,SAASC,eAAe,SDiHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2e58f847.chunk.js","sourcesContent":["export const CHANGE_AUTH = 'change_auth';","import { combineReducers } from 'redux';\nimport authReducer from './simpleAuthButton';\n\nexport default combineReducers({\n  //- put reducer key: functioncalls here\n  auth: authReducer\n});\n","import { CHANGE_AUTH } from '../actions/types';\n\nexport default function (state = false, action) {\n    switch (action.type) {\n        case CHANGE_AUTH:\n            return action.payload;\n        default:\n            return state;\n    }\n};\n","import React, { Component } from 'react';\n\nclass TestList extends Component {\n    render() {\n        return (\n            <div>\n                <h4>simple List</h4>\n                <ul>\n                    <li>list element</li>\n                </ul>\n            </div>\n        );\n    }\n};\n\nexport default TestList;\n","import { CHANGE_AUTH } from './types';\n\nexport function changeAuth(isLoggedIn) {\n    return {\n        type: CHANGE_AUTH,\n        payload: isLoggedIn\n    };\n};\n","import React, { Component } from 'react';\nimport { Route, Link /*, Redirect */ } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport TestList from './components/TestList';\nimport * as actions from './actions';\n\nclass App extends Component {\n    renderHeader() {\n        if (this.props.auth) {\n            return (\n                <div>\n                    <ul>\n                        <li><Link className=\"nav-list\" to=\"/list\">List</Link></li>\n                        <li><button className=\"sign-out\" onClick={() => this.props.changeAuth(false)}>Sign Out</button></li>\n                    </ul>\n                    <Route path=\"/list\" exact component={TestList} />\n                </div>\n            );\n        } else {\n            return (\n                <ul>\n                    <li><button className=\"sign-in\" onClick={() => this.props.changeAuth(true)}>Sign In</button></li>\n                </ul>\n            );\n        }\n    };\n    render() {\n        return (<div>{this.renderHeader()} </div>);\n    }\n};\n\nfunction mapStateToProps(state) {\n    return { auth: state.auth }\n};\n\nexport default connect(mapStateToProps, actions)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Root from './Root'; //new test setup\nimport App from './App';\n\n//- remove service worker to get it out of code coverage\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Root> \n        <BrowserRouter>\n            <Route path=\"/\" component={App} />\n        </BrowserRouter>\n    </Root>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxPromise from 'redux-promise';\nimport reducers from './reducers'; //Reminder: this imports reducers/index.js\n\nexport default ({ children, initialState={} }) => {\n    const store = createStore(\n        reducers,\n        initialState,\n        applyMiddleware(reduxPromise)\n    );\n    return (\n        <Provider store={store}>\n            {children}\n        </Provider>\n    );\n};\n"],"sourceRoot":""}